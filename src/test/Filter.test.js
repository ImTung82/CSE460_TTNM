import { describe, it, expect } from "vitest";

// ======================
// üß© H√ÄM 1: L·ªçc theo t√™n s√°ch
// ======================
const filterBooksByName = (searchQuery, initialBooks) => {
  let error = "";
  let filteredBooks = [...initialBooks];

  if (searchQuery) {
    if (!searchQuery.trim() || searchQuery.trim() === "") {
      error = "T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    } else if (searchQuery.length > 225) {
      error = "T√™n s√°ch kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 225 k√Ω t·ª±";
    } else {
      filteredBooks = filteredBooks.filter((book) =>
        book.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
      if (filteredBooks.length === 0) {
        error = "Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p";
      }
    }
  } else {
    error = "T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
  }

  return { error, filteredBooks };
};

// ======================
// üß© H√ÄM 2: L·ªçc theo danh m·ª•c
// ======================
const filterBooksByCategory = (categoryKey, booksData, categories) => {
  let error = "";
  let filteredBooks = [];

  if (categoryKey) {
    const categoryObj = categories.find((cat) => cat.key === categoryKey);
    if (!categoryObj) {
      error = "Danh m·ª•c kh√¥ng h·ª£p l·ªá";
    } else {
      filteredBooks = booksData.filter(
        (book) =>
          book.category &&
          book.category.toLowerCase().replace(/\//g, "-") === categoryKey
      );
    }
  } else {
    filteredBooks = [...booksData];
  }

  return { error, filteredBooks };
};

// ======================
// ‚úÖ TEST H√ÄM 1: filterBooksByName
// ======================
describe("filterBooksByName", () => {
  const books = [
    { title: "L·∫≠p tr√¨nh Java" },
    { title: "C·∫•u tr√∫c d·ªØ li·ªáu" },
    { title: "H·ªçc m√°y c∆° b·∫£n" },
  ];

  it("b·∫Øt l·ªói khi searchQuery l√† chu·ªói r·ªóng", () => {
    const { error } = filterBooksByName("", books);
    expect(error).toBe("T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  });

  it("b·∫Øt l·ªói khi searchQuery ch·ªâ c√≥ kho·∫£ng tr·∫Øng", () => {
    const { error } = filterBooksByName("   ", books);
    expect(error).toBe("T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  });

  it("b·∫Øt l·ªói khi searchQuery v∆∞·ª£t qu√° 225 k√Ω t·ª±", () => {
    const longQuery = "a".repeat(226);
    const { error } = filterBooksByName(longQuery, books);
    expect(error).toBe("T√™n s√°ch kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 225 k√Ω t·ª±");
  });

  it("tr·∫£ v·ªÅ danh s√°ch ph√π h·ª£p khi t√¨m th·∫•y", () => {
    const { error, filteredBooks } = filterBooksByName("Java", books);
    expect(error).toBe("");
    expect(filteredBooks).toEqual([{ title: "L·∫≠p tr√¨nh Java" }]);
  });

  it("b·∫Øt l·ªói khi kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p", () => {
    const { error, filteredBooks } = filterBooksByName("Python", books);
    expect(error).toBe("Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p");
    expect(filteredBooks).toEqual([]);
  });

  it("ph√¢n bi·ªát ch·ªØ hoa ‚Äì th∆∞·ªùng ƒë√∫ng c√°ch", () => {
    const { error, filteredBooks } = filterBooksByName("C·∫§U TR√öC", books);
    expect(error).toBe("");
    expect(filteredBooks).toEqual([{ title: "C·∫•u tr√∫c d·ªØ li·ªáu" }]);
  });
});

// ======================
// ‚úÖ TEST H√ÄM 2: filterBooksByCategory
// ======================
describe("filterBooksByCategory", () => {
  const categories = [
    { key: "lap-trinh", name: "L·∫≠p tr√¨nh" },
    { key: "ai", name: "Tr√≠ tu·ªá nh√¢n t·∫°o" },
  ];

  const booksData = [
    { title: "Java c∆° b·∫£n", category: "lap-trinh" },
    { title: "Deep Learning", category: "ai" },
    { title: "Kh√¥ng c√≥ danh m·ª•c" },
  ];

  it("tr·∫£ v·ªÅ to√†n b·ªô s√°ch khi kh√¥ng c√≥ categoryKey", () => {
    const { error, filteredBooks } = filterBooksByCategory("", booksData, categories);
    expect(error).toBe("");
    expect(filteredBooks).toEqual(booksData);
  });

  it("b·∫Øt l·ªói khi categoryKey kh√¥ng t·ªìn t·∫°i trong danh m·ª•c", () => {
    const { error, filteredBooks } = filterBooksByCategory("khong-ton-tai", booksData, categories);
    expect(error).toBe("Danh m·ª•c kh√¥ng h·ª£p l·ªá");
    expect(filteredBooks).toEqual([]);
  });

  it("l·ªçc ƒë√∫ng s√°ch khi categoryKey h·ª£p l·ªá", () => {
    const { error, filteredBooks } = filterBooksByCategory("ai", booksData, categories);
    expect(error).toBe("");
    expect(filteredBooks).toEqual([{ title: "Deep Learning", category: "ai" }]);
  });

  it("x·ª≠ l√Ω ƒë√∫ng khi s√°ch kh√¥ng c√≥ tr∆∞·ªùng category", () => {
    const { error, filteredBooks } = filterBooksByCategory("lap-trinh", booksData, categories);
    expect(error).toBe("");
    expect(filteredBooks).toEqual([{ title: "Java c∆° b·∫£n", category: "lap-trinh" }]);
  });
});
